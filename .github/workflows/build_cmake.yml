name: CMake

on: [pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  build_type: RelWithDebInfo

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "None"

jobs:
  # Use a bash shell so we can use the same syntax for environment variable
  # access regardless of the host operating system
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "ubuntu-clang",
              artifact: "linux-clang.tar.xz",
              os: ubuntu-latest,
              cc: "clang",
              cxx: "clang++"
            }

    steps:
    - uses: actions/checkout@v2

    - name: Cache conan
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ~/.cache/pip
          ${{ env.CONAN_USER_HOME }}
        key: ${{ matrix.config.cc }}-${{ env.build_type }}-${{ hashFiles('dependencies/CMakeLists.txt') }}

    - name: Create Build Environment
      shell: bash
      run: cmake -E make_directory "${{ runner.workspace }}/build"

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install --upgrade conan==1.59.0
        conan config init
        conan config set general.revisions_enabled=1
        conan profile update conf.tools.system.package_manager:mode=install default
        conan profile update conf.tools.system.package_manager:sudo=True default
        # Without this clear reruns on different machines sometimes fail
        conan remove --system-reqs '*'

    - name: Configure CMake
      shell: bash
      working-directory: ${{ runner.workspace }}/build
      # Set CC/ CXX so that the specified compiler is used
      # Source the profile to make sure conan is in PATH
      run: |
        export CC=$(whereis -b ${{ matrix.config.cc }} | awk '{print $2}')
        export CXX=$(whereis -b ${{ matrix.config.cxx }} | awk '{print $2}')
        source ~/.profile
        cmake -S $GITHUB_WORKSPACE                       \
              -B "${{ runner.workspace }}/build"         \
              -DCMAKE_BUILD_TYPE="${{ env.build_type }}" \
              -DDSA_STATIC_TESTS=ON

    - name: Build
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      # Execute the build. You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $build_type

    - name: Test
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $build_type

