Features:
	DSA:
		Add Data Structures:
			Queue
			Stack
			Double ended queue
			Red-Black Tree
			B-Tree
			AVL Trees
			Hash tables
			Fibonacci Tree
		Algorithms:
			Traverse
			Sort
				Quick
				Linear
			Minimum element
			Maximum element
			Maximum subarray
		Multithreading

	Visual:
		add shuffle elements algorithm
		Visualise linear search
		Visualise binary search
		Drag viewport
		Zoom In/ Out in viewport
		Animate actions such as move and copy assignments
		Show commands being processed
		Memory view (Vertical bars of sets of bytes + memory addresses)
		Add logic to better layout the nodes in the viewport.
			Allocations should not overlap on screen
			Allocations should be placed in nicer layout
				List: a -> b -> c
						|
						v
					   e <- d

				Tree:    a
				       /   \
				      b     c

		New user interface:
			Elements should be confined to the viewport
			Represent a memory block with contents:
				size of the allocation
				a spot for each element
				represent uninitialised memory
				represent initialised memory
				represent different values - string, line, colour
				animate element movement
				animate element value change
				represent pointers as arrows to other elements/ memory blocks
			Automatically arrange memory blocks
				they should not overlap
				rearrange themselves such that they point to close nodes
			Represent stack values
				Should be on a stack to the side pointing towards heap objects
			Represent the nullptr

Improvements:
	DSA:
		Make the structures constexpr
		Exception safety
		Create a buffer class to encapsulate Alloc_Traits calls and dealing with uninitialised values.
		Create a class for a pointer base (Creates a pointer looking class given .get and .set functions for Value*)
		Memory_Representation could be managed by Memory_Monitor. It could store the state of the objects it monitors inside and allow the current Event_Handlers to use the visits to extract the information that they require. We would probably need to separate the Memory_Monitor into an Allocator and a State class. So that the State is not in a different instance based on the template parameter.
		Object_Event_Type::Underlying_(Copy/Move)_Assign can be merged together into Underlying_Value_Assign
		Create a range based container to hold the memory_representation elements. i.e. a container that holds ranges, if a value inside of a held range is indexed the beginning of the range is returned

Issues:
	General:
		make swap implementations non-member functions in the same namespace as the struct, this avoids having to use using std::swap each time
	DSA:
		Binary_Tree does not account for duplicates

	Visual:
		User interface shows the current read value instead of what the visualisation shows (It pulls from the actual vector rather than the visual representation of it)
		Viewport should not have rendering code + rename the class
		Use standard typenames and concepts: e.x. use pointer instead of Pointer and allocator_traits instead of Allocator_Traits (It was nice to learn making my own but it is too time consuming now)
	
	Crash:
		Select Array
		Resize to five elements
		write 0, 1, 2, 3, 4 to the elements
		call merge sort
		switch to Vector
		-> resulted in crash

		Most probably the destructor events are being thrown away so the state of the memory representation remains invalid

Documentation:
	Write reason the file exits at the top
	Write descriptions for classes
	Write descriptions for functions
	Create a document in folders to explain the design of the components

Research:
	Research about allocator best practices
	Web assembly to run in browser
	C++20 features:
		C++ Modules
		Start using C++ concepts
		Use three way comparison operator

Testing:
	Use Memory_Monitor_Event_Handler_Fixture in all the tests that need a handler

	DSA:
		Memory_Representation is currently untested. It was moved from inside Allocation_Verifier - which is tested but during the extraction the tests were not written for it. The tests for Allocation_Verifier can now be set up by creating a memory representation instance and passing it directly to the verifier, instead of creating it through the interface (decide if this option is better or not)
